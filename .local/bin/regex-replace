#!/usr/bin/env php
<?php

error_reporting(-1);
set_error_handler(function ($errno, $errstr, $errfile, $errline) {
    print "\n$errstr\n";
    exit(1);
});

ini_set('pcre.backtrack_limit', "90000000");
ini_set('pcre.recursion_limit', "90000000");

$program = array_shift($argv);
$regex   = array_shift($argv);
$replace = array_shift($argv);

if ($regex === null || $replace === null) {
    print "Usage: $program <perl_regex> <perl_regex_replace> [<file>...]\n";
    exit(1);
}

// Insert a "\" before each "#" preceded by an even number of "\"s
$regex2 = "#" . preg_replace('#(?<!\\\\)((\\\\\\\\)*)(\#)#S', '$1\\\\$3', $regex) . "#sS";
$errors = array(
    PREG_INTERNAL_ERROR        => 'there was an internal PCRE error',
    PREG_BACKTRACK_LIMIT_ERROR => 'pcre.backtrack_limit excausted',
    PREG_RECURSION_LIMIT_ERROR => 'pcre.recursion_limit excausted',
    PREG_BAD_UTF8_ERROR        => 'malformed UTF-8 data',
    PREG_BAD_UTF8_OFFSET_ERROR => 'offset didn\'t correspond to the beginning of a valid UTF-8 code point',
);
$count = 0;
$numfiles = count($argv);
$i = 0;
$clear = "\r\x1B[2K";
foreach ($argv as $file) {
    print "$clear$i/$numfiles: $file";
    $contents = file_get_contents($file);
    $contents = preg_replace($regex2, $replace, $contents, -1, $count1);
    $count += $count1;

    $error = preg_last_error();
    if ($error !== PREG_NO_ERROR)
        trigger_error($errors[$error]);

    file_put_contents($file, $contents);
    $i++;
    print "$clear$i/$numfiles";
}

print "$clear$count replacements accross $numfiles files\n";

